/*
 * generated by Xtext 2.29.0
 */
package edu.vanderbilt.isis.caid.assurancedsl.generator
import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource


import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.eclipse.emf.ecore.EObject
import edu.vanderbilt.isis.caid.assurancedsl.assurance.ALLNodes
import edu.vanderbilt.isis.caid.assurancedsl.assurance.GoalNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.StrategyNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.SolutionNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.ContextNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.AssumptionNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.JustificationNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.GoalNodeRef
import edu.vanderbilt.isis.caid.assurancedsl.assurance.StrategyNodeRef
import edu.vanderbilt.isis.caid.assurancedsl.assurance.SolutionNodeRef
import edu.vanderbilt.isis.caid.assurancedsl.assurance.ContextNodeRef
import edu.vanderbilt.isis.caid.assurancedsl.assurance.AssumptionNodeRef
import edu.vanderbilt.isis.caid.assurancedsl.assurance.JustificationNodeRef
import edu.vanderbilt.isis.caid.assurancedsl.assurance.BaseNode
import edu.vanderbilt.isis.caid.assurancedsl.assurance.GoalDetails
import edu.vanderbilt.isis.caid.assurancedsl.assurance.StrategyDetails
import edu.vanderbilt.isis.caid.assurancedsl.assurance.AssurancePackage
import edu.vanderbilt.isis.caid.assurancedsl.assurance.AssuranceFactory
import edu.vanderbilt.isis.caid.assurancedsl.assurance.Description
import edu.vanderbilt.isis.caid.assurancedsl.assurance.UUIDType
import edu.vanderbilt.isis.caid.assurancedsl.assurance.Summary
import edu.vanderbilt.isis.caid.assurancedsl.assurance.URIA
import edu.vanderbilt.isis.caid.assurancedsl.assurance.LabelInfo
import java.util.UUID
import edu.vanderbilt.isis.caid.assurancedsl.assurance.SolutionStatus
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.emf.ecore.util.EcoreUtil
import org.json.JSONObject
import org.json.JSONArray
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.emf.common.util.EList
import java.util.List
import java.util.ArrayList
import java.util.Collections
import java.util.HashMap


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */

 

class AssuranceGenerator extends AbstractGenerator {

    @Inject extension IQualifiedNameProvider

	

    

	def JSONArray JsonObjectSort(JSONArray jsonArray) 
	{
	    var sortedArr = new JSONArray()
    	var listJsonObj = new ArrayList()
		
		for (i:0..jsonArray.size()-1) {
        	listJsonObj.add(jsonArray.getJSONObject(i))
		}

		Collections.sort(listJsonObj)[o1, o2 | 
		    o1.get("id").toString().compareToIgnoreCase(o2.get("id").toString())
		]

		for (i:0..jsonArray.size()-1) {
        	sortedArr.put(listJsonObj.get(i))
    	}
    	
        return sortedArr
	}

	
	

	def String getNodeType(EObject obj1) {
		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				return "Assumption"
			case AssurancePackage.CONTEXT_NODE:
				return "Context"
			case AssurancePackage.GOAL_NODE:
				return "Goal"
			case AssurancePackage.JUSTIFICATION_NODE:
				return "Justification"
			case AssurancePackage.SOLUTION_NODE:
				return "Solution"
			case AssurancePackage.STRATEGY_NODE:
				return "Strategy"
		}
		
	}

	def String getNodeName(EObject obj1) {
		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				return (obj1 as AssumptionNode).getName()
			case AssurancePackage.CONTEXT_NODE:
				return (obj1 as ContextNode).getName()
			case AssurancePackage.GOAL_NODE:
				return (obj1 as GoalNode).getName()
			case AssurancePackage.JUSTIFICATION_NODE:
				return (obj1 as JustificationNode).getName()
			case AssurancePackage.SOLUTION_NODE:
				return (obj1 as SolutionNode).getName()
			case AssurancePackage.STRATEGY_NODE:
				return (obj1 as StrategyNode).getName()
		}
		
	}

	def String modSeparator(QualifiedName obj1) {
		return obj1.toString().replaceAll("\\.","/")
		
	}

	def String getNodeFQN(EObject obj1) {
		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				return (obj1 as AssumptionNode).getFullyQualifiedName().modSeparator()
			case AssurancePackage.CONTEXT_NODE:
				return (obj1 as ContextNode).getFullyQualifiedName().modSeparator()
			case AssurancePackage.GOAL_NODE:
				return (obj1 as GoalNode).getFullyQualifiedName().modSeparator()
			case AssurancePackage.JUSTIFICATION_NODE:
				return (obj1 as JustificationNode).getFullyQualifiedName().modSeparator()
			case AssurancePackage.SOLUTION_NODE:
				return (obj1 as SolutionNode).getFullyQualifiedName().modSeparator()
			case AssurancePackage.STRATEGY_NODE:
				return (obj1 as StrategyNode).getFullyQualifiedName().modSeparator()
		}
		
	}

	def String getParsedInfo(String d)
	{
		//return d.substring(d.indexOf(':')+1, d.lastIndexOf(';')).trim()
		return d.substring(d.indexOf('\'\'\'')+3, d.lastIndexOf('\'\'\'')).trim()
		//return d
	}
	    
	def String dumpNodeInfo(EList<BaseNode> details)
	{
		var ret = new String('')
		if (details.length !== 0)
		{
			var b = details.get(0)
			if (b.info.length !== 0)
			{
				return getParsedInfo(b.info.get(0).info)
			}
		}
		return ret
		
	}

	def String dumpNodeSummary(EList<BaseNode> details)
	{
		var ret = new String('')
		if (details.length !== 0)
		{
			var b = details.get(0)
			if (b.summary.length !== 0)
			{
				return getParsedInfo(b.summary.get(0).info)
			}
		}
		
		return ret

	}

	def String dumpNodeUUID(EList<BaseNode> details)
	{
		var ret = new String('')
		if (details.length !== 0)
		{
			var b = details.get(0)
			var UUIDType uuid = b.getUuid()
			if (uuid !== null) 
			{
				var uuidstr = uuid.getInfo();
				if (uuidstr !== null  && uuidstr !== "")
				{
					return uuidstr

				}
			}
			return setUUIDEntry(b)

		}
		return ret
	}
	
    def List<String> dumpNodeLabels(EList<BaseNode> details)
	{
		var ret = new ArrayList<String>
		if (details.length !== 0)
		{
            var b = details.get(0)
            for (LabelInfo obj1: b.labels)
            {
                ret.add(obj1.name)
            }
			
		}
		return ret
	}

	def List<String> dumpNodeArtifacts(EList<BaseNode> details)
	{
		var ret = new ArrayList<String>
		if (details.length !== 0)
		{
            var b = details.get(0)
            for (URIA obj1: b.artifacts)
            {
                ret.add(obj1.uri)
            }
			
		}
		return ret
	}

	def fillDetails(EList<BaseNode> g, JSONObject obj)
	{
		obj.put("uuid", dumpNodeUUID(g))
		obj.put("info", dumpNodeInfo(g))
        obj.put("summary", dumpNodeSummary(g))
        obj.put("artifacts", dumpNodeArtifacts(g))
        obj.put("labels", dumpNodeLabels(g))
		return obj
	}

	

	def getNodeDetail(EObject obj1, JSONObject obj){

		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				return (obj1 as AssumptionNode).getDetails().fillDetails(obj)
			case AssurancePackage.CONTEXT_NODE:
				return (obj1 as ContextNode).getDetails().fillDetails(obj)
			case AssurancePackage.GOAL_NODE:
				return (obj1 as GoalNode).getDetails().fillDetails(obj)
			case AssurancePackage.JUSTIFICATION_NODE:
				return (obj1 as JustificationNode).getDetails().fillDetails(obj)
			case AssurancePackage.SOLUTION_NODE:
				return (obj1 as SolutionNode).getDetails().fillDetails(obj)
			case AssurancePackage.STRATEGY_NODE:
				return (obj1 as StrategyNode).getDetails().fillDetails(obj)

		}
		return obj
	}

	
	

	def String getSolvedBy(EObject obj1)
	{
		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.GOAL_NODE:
				return getNodeFQN(obj1)
			case AssurancePackage.SOLUTION_NODE:
				return getNodeFQN(obj1)
			case AssurancePackage.STRATEGY_NODE:
				return getNodeFQN(obj1)
			case AssurancePackage.GOAL_NODE_REF:
					return getNodeFQN((obj1 as GoalNodeRef).ref)
			case AssurancePackage.SOLUTION_NODE_REF:
				return getNodeFQN((obj1 as SolutionNodeRef).ref)
			case AssurancePackage.STRATEGY_NODE_REF:
				return  getNodeFQN((obj1 as StrategyNodeRef).ref)

		}
		return ""
		
	}
	
	def List<String> getGoalNodeSolvedBy(EList<GoalDetails> details)
	{
		var List<String> list = newArrayList
		for (obj1: details)
		{
			var ret  = getSolvedBy(obj1)
			if (ret !== "")
				list.add(ret)
		}
		return list
	}

	def List<String> getStrategyNodeSolvedBy(EList<StrategyDetails> details)
	{
		var List<String> list = newArrayList
		for (obj1: details)
		{
			var ret  = getSolvedBy(obj1)
			if (ret !== "")
				list.add(ret)
		}
		return list
	}

	def String getInContextOf(EObject obj1)
	{
		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				return getNodeFQN(obj1)
			case AssurancePackage.CONTEXT_NODE:
				return getNodeFQN(obj1)
			case AssurancePackage.JUSTIFICATION_NODE:
				return getNodeFQN(obj1)
			case AssurancePackage.ASSUMPTION_NODE_REF:
					return getNodeFQN((obj1 as AssumptionNodeRef).ref)
			case AssurancePackage.CONTEXT_NODE_REF:
				return getNodeFQN((obj1 as ContextNodeRef).ref)
			case AssurancePackage.JUSTIFICATION_NODE_REF:
				return  getNodeFQN((obj1 as JustificationNodeRef).ref)

		}

		return ""
	}

	def List<String> getGoalNodeInContextOf(EList<GoalDetails> details)
	{
		var List<String> list = newArrayList
		for (obj1: details)
		{
			var ret  = getInContextOf(obj1)
			if (ret !== "")
				list.add(ret)
		}
		return list
	}

	def List<String> getStrategyNodeInContextOf(EList<StrategyDetails> details)
	{
		var List<String> list = newArrayList
		for (obj1: details)
		{
			var ret  = getInContextOf(obj1)
			if (ret !== "")
				list.add(ret)
		}
		return list
	}

	def JSONArray generateNodes(Resource resource, JSONArray ret)
    {
		
        for (ALLNodes g: resource.allContents.toIterable.filter(ALLNodes))
        {
            var obj = new JSONObject()
			obj.put("type",getNodeType(g))
			obj.put("name",getNodeName(g))
			obj.put("id",getNodeFQN(g))
			obj = g.getNodeDetail(obj)
			if (g instanceof GoalNode) {
				obj.put("solvedBy", getGoalNodeSolvedBy(g.getNodedetails()))
				obj.put("inContextOf", getGoalNodeInContextOf(g.getNodedetails()))
			}
			if (g instanceof StrategyNode) {
				obj.put("solvedBy", getStrategyNodeSolvedBy(g.getNodedetails()))
				obj.put("inContextOf", getStrategyNodeInContextOf(g.getNodedetails()))
			}
            if (g instanceof SolutionNode) {
				obj.put("status", g.getStatus().getName())
				
			}
			if (obj.toString() !== "{}")
				ret.put(obj)
        }
        return ret
        
    }

	def JSONArray generateJSON(Resource r)
	{
		var JSONArray jsoninfo = new JSONArray

		jsoninfo = generateNodes(r, jsoninfo)
		
		return jsoninfo
       

	}

	def  HashMap<String, ALLNodes>  getObjectDictionary(Resource resource, HashMap<String, ALLNodes> ret )
	{
		
		for (ALLNodes g: resource.allContents.toIterable.filter(ALLNodes))
        {
            var String id  = getNodeFQN(g)
			ret.put(id, g)
        }
        return ret
	}

	def void OnNameChange(ALLNodes obj1, String newValue) {

		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				(obj1 as AssumptionNode).setName(newValue)
			case AssurancePackage.CONTEXT_NODE:
				(obj1 as ContextNode).setName(newValue)
			case AssurancePackage.GOAL_NODE:
				(obj1 as GoalNode).setName(newValue)
			case AssurancePackage.JUSTIFICATION_NODE:
				(obj1 as JustificationNode).setName(newValue)
			case AssurancePackage.SOLUTION_NODE:
				(obj1 as SolutionNode).setName(newValue)
			case AssurancePackage.STRATEGY_NODE:
				(obj1 as StrategyNode).setName(newValue)
		}
		
	}

	
	def BaseNode getBaseNode(ALLNodes obj1){

		var EList<BaseNode> b = null
		var BaseNode bn

		switch (obj1.eClass().getClassifierID()) {
			case AssurancePackage.ASSUMPTION_NODE:
				b = (obj1 as AssumptionNode).getDetails()
			case AssurancePackage.CONTEXT_NODE:
				b = (obj1 as ContextNode).getDetails()
			case AssurancePackage.GOAL_NODE:
				b = (obj1 as GoalNode).getDetails()
			case AssurancePackage.JUSTIFICATION_NODE:
				b = (obj1 as JustificationNode).getDetails()
			case AssurancePackage.SOLUTION_NODE:
				b = (obj1 as SolutionNode).getDetails()
			case AssurancePackage.STRATEGY_NODE:
				b = (obj1 as StrategyNode).getDetails()

		}
		if (b.length !== 0 )
		{
			bn = b.get(0)

		}
		
		//bn.eSet(featureID, newValue)
		return bn
	}

	def String setUUIDEntry(BaseNode b)
	{
		var uuidstr = UUID.randomUUID();
        var uuidAsString = uuidstr.toString();
		var UUIDType uuidobj = b.getUuid();
		if (uuidobj === null)
		{
			uuidobj = AssuranceFactory.eINSTANCE.createUUIDType()
			b.setUuid(uuidobj)

		}
		uuidobj.setInfo(uuidAsString)
		return uuidAsString;
	}

	

	
	def String setFeature(ALLNodes node, String attr, Object newValue)
	{
		var BaseNode b  = getBaseNode(node)
		var String mesg = ""
		switch(attr)
		{
			case "labels":
				b.eSet(b.eClass().getEStructuralFeature(AssurancePackage.BASE_NODE__LABELS),newValue)
			case "info": 
				if (b.getInfo().size() > 0) {
					b.getInfo().get(0).setInfo(newValue.toString())
				}
				else
				{
					var Description i = AssuranceFactory.eINSTANCE.createDescription()
					b.getInfo().add(i)
					b.getInfo().get(0).setInfo(newValue.toString())
					

				}
			case "summary":
				if (b.getSummary().size() > 0) {
					b.getSummary().get(0).setInfo(newValue.toString())
				}
				else
				{
					var Summary i = AssuranceFactory.eINSTANCE.createSummary()
					b.getSummary().add(i)
					b.getSummary().get(0).setInfo(newValue.toString())
					
				}
			case "artifacts":
              b.eSet(b.eClass().getEStructuralFeature(AssurancePackage.BASE_NODE__ARTIFACTS), newValue)

            case "status":
            {
                var SolutionNode s = (node as SolutionNode)
                var SolutionStatus x = SolutionStatus.NOT_REVIEWED
                switch (newValue)
                {
                    case "Approved": 
                        x = SolutionStatus.APPROVED
                    case "Disapproved": 
                        x = SolutionStatus.DISAPPROVED
                }
                s.eSet(s.eClass().getEStructuralFeature(AssurancePackage.SOLUTION_NODE__STATUS), x)

            }
			default:
				mesg = "Unknown attribute type "+ attr
				
		}
		return mesg;
	}

	def String OnAttributeChange(ALLNodes node, String attr, Object newValue)
	{
		var String message = ""

		if (attr == "name")
		{
			var String newName = newValue.toString()
			OnNameChange(node,newName)

		}
		else {
			message  = setFeature(node, attr, newValue)
		}
		return message
	
	}

	def Object getRef(String childType, String childID)
	{

	}

	def EObject getChildNode(ALLNodes node,String childType, String childName)
	{
		
		switch (childType) {
			case "Goal":
			{
				var GoalNode temp = AssuranceFactory.eINSTANCE.createGoalNode()
				temp.setName(childName)
				temp.getDetails().add(AssuranceFactory.eINSTANCE.createBaseNode())
				return temp
			}
			case "Strategy":
			{
				var StrategyNode temp = AssuranceFactory.eINSTANCE.createStrategyNode()
				temp.setName(childName)
				temp.getDetails().add(AssuranceFactory.eINSTANCE.createBaseNode())
				return temp
			}
			case "Solution":
			{
				var SolutionNode temp = AssuranceFactory.eINSTANCE.createSolutionNode()
				temp.setName(childName)
				temp.getDetails().add(AssuranceFactory.eINSTANCE.createBaseNode())
				return temp
			}
			case "Context":
			{
				var ContextNode temp = AssuranceFactory.eINSTANCE.createContextNode()
				temp.setName(childName)
				temp.getDetails().add(AssuranceFactory.eINSTANCE.createBaseNode())
				return temp
			}
			case "Assumption":
			{
				var AssumptionNode temp = AssuranceFactory.eINSTANCE.createAssumptionNode()
				temp.setName(childName)
				temp.getDetails().add(AssuranceFactory.eINSTANCE.createBaseNode())
				return temp
			}
			case "Justification":
			{
				var JustificationNode temp = AssuranceFactory.eINSTANCE.createJustificationNode()
				temp.setName(childName)
				temp.getDetails().add(AssuranceFactory.eINSTANCE.createBaseNode())
				return temp
			}
				

		}
		return null
	}

	def EObject getChildRef(ALLNodes childNode)
	{
		
		switch (childNode.eClass().getClassifierID()) {
			case AssurancePackage.GOAL_NODE:
			{
				var GoalNodeRef temp = AssuranceFactory.eINSTANCE.createGoalNodeRef()
				temp.setRef(childNode as GoalNode)
				return temp
			}
			case AssurancePackage.STRATEGY_NODE:
			{
				var StrategyNodeRef temp = AssuranceFactory.eINSTANCE.createStrategyNodeRef()
				temp.setRef(childNode as StrategyNode)
				return temp
			}
			case AssurancePackage.SOLUTION_NODE:
			{
				var SolutionNodeRef temp = AssuranceFactory.eINSTANCE.createSolutionNodeRef()
				temp.setRef(childNode as SolutionNode)
				return temp
			}
			case AssurancePackage.CONTEXT_NODE:
			{
				var ContextNodeRef temp = AssuranceFactory.eINSTANCE.createContextNodeRef()
				temp.setRef(childNode as ContextNode)
				return temp
			}
			case AssurancePackage.ASSUMPTION_NODE:
			{
				var AssumptionNodeRef temp = AssuranceFactory.eINSTANCE.createAssumptionNodeRef()
				temp.setRef(childNode as AssumptionNode)
				return temp
			}
			case AssurancePackage.JUSTIFICATION_NODE:
			{
				var JustificationNodeRef temp = AssuranceFactory.eINSTANCE.createJustificationNodeRef()
				temp.setRef(childNode as JustificationNode)
				return temp
			}
				

		}
		return null
	}

	// EObject create(EClass eClass)

	def String onNewChildNode(ALLNodes node, String childType, String childName)
	{
		var String message = ""
		var EObject eObject = getChildNode(node,childType, childName)
        if (eObject !== null)
		{

			switch (node.eClass().getClassifierID()) {
				case AssurancePackage.GOAL_NODE:
				{
					var GoalNode gn = (node as GoalNode)
				    gn.getNodedetails().add(eObject as GoalDetails)
				}
				case AssurancePackage.STRATEGY_NODE:
				{
					var StrategyNode sn = (node as StrategyNode)
				    sn.getNodedetails().add(eObject as StrategyDetails)
				}

			}

		}

		return message
	}


	def String onNewChildRef(ALLNodes node, ALLNodes childNode)
	{
		var String message = ""
		var EObject eObject = getChildRef(childNode)
        if (eObject !== null)
		{

			switch (node.eClass().getClassifierID()) {
				case AssurancePackage.GOAL_NODE:
					(node as GoalNode).getNodedetails().add( eObject as GoalDetails)
				case AssurancePackage.STRATEGY_NODE:
					(node as StrategyNode).getNodedetails().add( eObject as StrategyDetails)

			}

		}

		return message
	}

	def String removeGoalReference(ALLNodes node, ALLNodes childNode)
	{
		var String message = ""
		var List<GoalDetails> gdlist = (node as GoalNode).getNodedetails()
		var int index =-1
		var int count = -1
		for(GoalDetails gd : gdlist)
		{
			count = count+1
			switch (gd.eClass().getClassifierID()) {
				case AssurancePackage.GOAL_NODE_REF:
					if ((gd as GoalNodeRef).ref.equals(childNode))
					{
						index = count
					}
                case AssurancePackage.STRATEGY_NODE_REF:
					if ((gd as StrategyNodeRef).ref.equals(childNode))
					{
						index = count
					}
				case AssurancePackage.SOLUTION_NODE_REF:
					if ((gd as SolutionNodeRef).ref.equals(childNode))
					{
						index = count
					}
				case AssurancePackage.CONTEXT_NODE_REF:
					if ((gd as ContextNodeRef).ref.equals(childNode))
					{
						index = count
					}
				case AssurancePackage.JUSTIFICATION_NODE_REF:
					if ((gd as JustificationNodeRef).ref.equals(childNode))
					{
						index = count
					}

				case AssurancePackage.ASSUMPTION_NODE_REF:
					if ((gd as AssumptionNodeRef).ref.equals(childNode))
					{
						index = count
					}
			}
			
		}
		if (index !== -1)
		{
			(node as GoalNode).getNodedetails().remove(index)
			
		}
		else {
			message = "Unable to delete goal child node"
		}

		return message


	}

	def String removeStrategyReference(ALLNodes node, ALLNodes childNode)
	{

		var String message = ""
		var List<StrategyDetails> gdlist = (node as StrategyNode).getNodedetails()
		var int index =-1
		var int count = -1
		for(StrategyDetails gd : gdlist)
		{
			count = count+1
			switch (gd.eClass().getClassifierID()) {
				case AssurancePackage.GOAL_NODE_REF:
					if ((gd as GoalNodeRef).ref.equals(childNode))
					{
						index = count
					}
				case AssurancePackage.SOLUTION_NODE_REF:
					if ((gd as SolutionNodeRef).ref.equals(childNode))
					{
						index = count
					}
				case AssurancePackage.CONTEXT_NODE_REF:
					if ((gd as ContextNodeRef).ref.equals(childNode))
					{
						index = count
					}
				case AssurancePackage.JUSTIFICATION_NODE_REF:
					if ((gd as JustificationNodeRef).ref.equals(childNode))
					{
						index = count
					}

				case AssurancePackage.ASSUMPTION_NODE_REF:
					if ((gd as AssumptionNodeRef).ref.equals(childNode))
					{
						index = count
					}
			}
			
		}
		
		if (index !== -1)
		{
			(node as StrategyNode).getNodedetails().remove(index)
			
		}
		else
		{
			message = "Unable to delete strategy child node"
		}

		return message
		
	}


	def String onRemoveChildNode(ALLNodes node, ALLNodes childNode)
	{
		var String message = ""
		
        

		switch (node.eClass().getClassifierID()) {
			case AssurancePackage.GOAL_NODE:
			{
				var EList<GoalDetails> gds = (node as GoalNode).getNodedetails()
				if (gds.indexOf( childNode as GoalDetails) !=-1)
				{
					(node as GoalNode).getNodedetails().remove( childNode as GoalDetails)
				}
				else {
					message = removeGoalReference(node, childNode)
				}
			}	
			case AssurancePackage.STRATEGY_NODE:
			{
				var EList<StrategyDetails> sds = (node as StrategyNode).getNodedetails()
				if (sds.indexOf( childNode as StrategyDetails) !=-1)
				{
					(node as StrategyNode).getNodedetails().remove( childNode as StrategyDetails)
				}
				else {
					message =  removeStrategyReference(node, childNode)
				}
			}

		}

		


		return message
	}

	def String onDeleteNode(ALLNodes node)
	{
		var String message = ""
		EcoreUtil.delete(node)


		return message
	}

		
	
	
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//val fileName = URI.decode(resource.URI.trimFileExtension.lastSegment)
		//var sortedjsoninfo = generateJSON(resource)
		//fsa.generateFile('../'+fileName+'-new.txt', sortedjsoninfo.toString(4))
	}

	

	

	
}
